openapi: 3.0.0
info:
  title: AI Summary Transactions API
  description: It allows you to summarize transactions using AI.
  version: 1.0.0
  license:
    name: Apache-2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: http://localhost:8080
    description: Local server

paths:
  /transactions:
    get:
      tags:
        - transactions
      summary: Get all transactions
      description: Retrieve a list of all transactions
      operationId: getAllTransactions
      parameters:
        - name: limit
          in: query
          required: false
          description: Maximum number of transactions to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          required: false
          description: Number of transactions to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: List of transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/TransactionApiResponse"
                  total:
                    type: integer
                    description: Total number of transactions
                  limit:
                    type: integer
                    description: Number of transactions per page
                  offset:
                    type: integer
                    description: Number of transactions skipped
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
    post:
      tags:
        - transactions
      summary: Create a new transaction
      description: Create a new transaction with the provided data
      operationId: createTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
      responses:
        "201":
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionApiResponse"
        "400":
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /transactions/{id}:
    get:
      tags:
        - transactions
      summary: Get transaction by ID
      description: Retrieve a specific transaction by its ID
      operationId: getTransactionById
      parameters:
        - name: id
          in: path
          required: true
          description: Transaction ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: Transaction found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionApiResponse"
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Transaction not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
    put:
      tags:
        - transactions
      summary: Update transaction by ID
      description: Update an existing transaction with the provided data
      operationId: updateTransaction
      parameters:
        - name: id
          in: path
          required: true
          description: Transaction ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTransactionRequest"
      responses:
        "200":
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionApiResponse"
        "400":
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Transaction not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
    delete:
      tags:
        - transactions
      summary: Delete transaction by ID
      description: Delete a specific transaction by its ID
      operationId: deleteTransaction
      parameters:
        - name: id
          in: path
          required: true
          description: Transaction ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "204":
          description: Transaction deleted successfully
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Transaction not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /ai/{source}/transactions:
    post:
      tags:
        - AI transactions
      summary: AI process transaction by generated query
      description: Process a natural language and generate a query to search for transactions using AI
      operationId: processAITransaction
      parameters:
        - name: source
          in: path
          required: true
          description: Source of transactions
          schema:
            type: string
            example: "query"
            enum:
              - query
              - list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: Natural language question about transactions
                  example: "Quais foram as transações de hoje?"
              required:
                - question
      responses:
        "200":
          description: AI processed query successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: AI processed result
                    example: "Encontrei 5 transações de hoje: compra no supermercado, pagamento de conta, etc."
        "400":
          description: Bad request - invalid question
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid question parameter"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
components:
  schemas:
    TransactionApiResponse:
      type: object
      properties:
        id:
          type: string
          description: Transaction unique identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        date:
          type: string
          format: date-time
          description: Transaction date and time
          example: "2025-01-08T20:22:32Z"
        amount:
          type: number
          format: decimal
          description: Transaction amount
          example: 29.99
        description:
          type: string
          description: Transaction description
          example: "Purchase at grocery store"
        merchant:
          $ref: "#/components/schemas/MerchantApiResponse"
      required:
        - id
        - date
        - amount
        - description
        - merchant
    MerchantApiResponse:
      type: object
      properties:
        name:
          type: string
          description: Merchant name
          example: "Walmart"
        category:
          type: string
          description: Merchant category
          example: "Groceries"
      required:
        - name
        - category
    CreateTransactionRequest:
      type: object
      properties:
        date:
          type: string
          format: date-time
          description: Transaction date and time
          example: "2025-01-08T20:22:32Z"
        amount:
          type: number
          format: decimal
          description: Transaction amount
          example: 29.99
        description:
          type: string
          description: Transaction description
          example: "Purchase at grocery store"
        merchant:
          $ref: "#/components/schemas/MerchantApiResponse"
      required:
        - date
        - amount
        - description
        - merchant
    UpdateTransactionRequest:
      type: object
      properties:
        date:
          type: string
          format: date-time
          description: Transaction date and time
          example: "2025-01-08T20:22:32Z"
        amount:
          type: number
          format: decimal
          description: Transaction amount
          example: 29.99
        description:
          type: string
          description: Transaction description
          example: "Purchase at grocery store"
        merchant:
          $ref: "#/components/schemas/MerchantApiResponse"
      required:
        - date
        - amount
        - description
        - merchant
